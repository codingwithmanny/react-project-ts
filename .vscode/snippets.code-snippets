{
  // Place your spark-frontend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Container Component": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "compcont",
    "body": [
      "// IMPORTS",
      "import React, { useEffect, useState } from 'react';",
      "import { connect } from 'react-redux';",
      "import { Dispatch, bindActionCreators } from 'redux';",
      "",
      "// CONTAINERS",
      "",
      "// PRESENTATIONS",
      "import $1 from '../../presentations/$1';",
      "",
      "// COMMONS",
      "",
      "// ACTIONS",
      "",
      "// TYPES",
      "interface $1ContainerProps {",
      "}",
      "",
      "/**",
      " *",
      " * @param props",
      " */",
      "// MAIN COMPONENT",
      "const $1Container:React.FC<$1ContainerProps> = props => {",
      "    // State / Props",
      "",
      "    // Functions",
      "",
      "    // Hooks",
      "",
      "    // Render",
      "    return <$1 />;",
      "};",
      "",
      "// Map State / Dispatch To Props",
      "/**",
      " *",
      " * @param state",
      " */",
      "const mapStateToProps = (state: any) => ({",
      "});",
      "",
      "/**",
      " *",
      " * @param dispatch",
      " */",
      "const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({}, dispatch);",
      "",
      "// EXPORTS",
      "export default connect(",
      "    mapStateToProps,",
      "    mapDispatchToProps",
      ")($1Container)"
    ]
  },
  "Presentation Component": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "comppres",
    "body": [
      "// IMPORTS",
      "import React, { useEffect, useState } from 'react';",
      "",
      "// STYLES",
      "import $1Styles from './styles';",
      "",
      "// TYPES",
      "interface $1Props {",
      "}",
      "",
      "// MAIN COMPONENT",
      "/**",
      " *",
      " * @param props",
      " */",
      "const $1:React.FC<$1Props> = props => {",
      "    // State / Props",
      "",
      "    // Functions",
      "",
      "    // Hooks",
      "",
      "    // Render",
      "    return <$1Styles></$1Styles>;",
      "};",
      "",
      "// EXPORTS",
      "export default $1;"
    ]
  },
  "Style Component": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "compstyle",
    "body": [
      "// IMPORTS",
      "import styled from 'styled-components';",
      "",
      "// TYPES",
      "interface $1StylesProps {",
      "}",
      "",
      "",
      "// MAIN STYLES",
      "export const $1Styles:React.SFC<$1StylesProps> = styled.$2<$1StylesProps>`$0`;"
    ]
  },
  "Redux Actions": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reduxservices",
    "body": [
      "// IMPORTS",
      "import axios from 'axios';",
      "",
      "// Config",
      "const apiUri = window.API_URL;",
      "",
      "// MAIN ACTIONS",
      "/**",
      " * $1 Action",
      " * @param {*} Object { token, $2 }",
      " * @returns {promise} axios promise",
      " */",
      "export const $1 = ({ token, $2 }) => {",
      "    return axios({",
      "        method: '$3',",
      "        url: `\\${apiUri}/$4`,",
      "        data: { $5 },",
      "        headers: { Authorization: `Bearer \\${token}` },",
      "    });",
      "};"
    ]
  },
  "Redux Action": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reduxservice",
    "body": [
      "/**",
      " * $1 Action",
      " * @param {*} Object { token, $2 }",
      " * @returns {promise} axios promise",
      " */",
      "export const $1 = ({ token, $2 }) => {",
      "    return axios({",
      "        method: '$3',",
      "        url: `\\${apiUri}/$4`,",
      "        data: { $5 },",
      "        headers: { Authorization: `Bearer \\${token}` },",
      "    });",
      "};"
    ]
  },
  "Redux Reducers": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reduxred",
    "body": [
      "// TYPES",
      "import {",
      "    $2_REQUEST,",
      "    $2_SUCCESS,",
      "    $2_FAILURE,",
      "} from './types';",
      "",
      "// Initial State",
      "const initialState = {",
      "    fetching: false,",
      "    data: null,",
      "    errors: null,",
      "};",
      "",
      "// MAIN REDUCER",
      "/**",
      " * $1Reducer Reducer",
      " * @param {Object} state current state of redux",
      " * @param {Object} action action state object",
      " * @returns {state} Redux State",
      " */",
      "export const $1Reducer = (state = initialState, action: any) => {",
      "    switch (action.type) {",
      "        case $2_REQUEST:",
      "            return {",
      "                ...state,",
      "                fetching: true,",
      "                errors: null,",
      "            };",
      "        case $2_SUCCESS:",
      "            return {",
      "                ...state,",
      "                fetching: false,",
      "                data: action.data,",
      "                errors: null,",
      "            };",
      "        case $2_FAILURE:",
      "            return {",
      "                ...state,",
      "                fetching: false,",
      "                errors: action.errors,",
      "            };",
      "        default:",
      "            return state;",
      "    };",
      "};"
    ]
  },
  "Redux Operation": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reduxacts",
    "body": [
      "// TYPES",
      "import { $3_REQUEST } from './types';",
      "",
      "// MAIN ACTIONS",
      "/**",
      " * $1 Action",
      " * @param {*} Object { $2 }",
      " * @returns {Dispatch} for redux",
      " */",
      "export const do$1 = ({ $2 }) => ({",
      "    type: $3_REQUEST,",
      "    $4",
      "});"
    ]
  },
  "Redux Operation Functions": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reduxact",
    "body": ["/**", " * $1 Action", " * @param {*} Object { $2 }", " * @returns {Dispatch} for redux", " */", "export const do$1 = ({ $2 }) => ({", "    type: $3_REQUEST,", "    $4", "});"]
  },
  "Redux Types": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "types",
    "body": ["// MAIN ACTION TYPES", "export const $1_REQUEST = '$1_REQUEST';"]
  },
  "Redux Type": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "exptype",
    "body": ["export const $1 = '$1';"]
  },
  "Redux Saga": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reduxsagas",
    "body": [
      "// IMPORTS",
      "import { takeLatest, put, call } from 'redux-saga/effects';",
      "",
      "// ACTIONS TYPES",
      "import {",
      "    $2_REQUEST,",
      "    $2_SUCCESS,",
      "    $2_FAILURE,",
      "} from './types';",
      "",
      "// ACTIONS",
      "import {",
      "    $3,",
      "} from './actions';",
      "",
      "// MAIN SAGAS",
      "/**",
      " * Worker function",
      " * @param {*} Object { token, $4 }",
      " * @returns {void}",
      " */",
      "export function* worker$1({ token, $4 }) {",
      "    try {",
      "        // Request",
      "        const response = yield call($3, { token, $4 });",
      "",
      "        // Catch For No Response",
      "        if (!response || !response.data || !response.data.success || !response.data.data) {",
      "            throw new Error('worker$1- No Data Returned');",
      "        }",
      "",
      "        // Dispatch",
      "        yield put({",
      "            type: $2_SUCCESS,",
      "            data: response.data.data,",
      "        });",
      "    } catch (error) {",
      "        const errors = error.response && error.response.data && error.response.data.error",
      "            ? error.response.data.error",
      "            : (error && error.message) || null;",
      "        yield put({ type: $2_FAILURE, ...{ errors } });",
      "    }",
      "}",
      "",
      "/**",
      " * Watcher function",
      " * @returns {void}",
      " */",
      "export function* watcher$1() {",
      "    yield takeLatest($2_REQUEST, worker$1);",
      "}"
    ]
  },
  "Redux Saga Function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reduxsaga",
    "body": [
      "/**",
      " * Worker function",
      " * @param {*} Object { token, $4 }",
      " * @returns {void}",
      " */",
      "export function* worker$1({ token, $4 }) {",
      "    try {",
      "        // Request",
      "        const response = yield call($3, { token, $4 });",
      "",
      "        // Catch For No Response",
      "        if (!response || !response.data || !response.data.success || !response.data.data) {",
      "            throw new Error('worker$1 - No Data Returned');",
      "        }",
      "",
      "        // Dispatch",
      "        yield put({",
      "            type: $2_SUCCESS,",
      "            data: response.data.data,",
      "        });",
      "    } catch (error) {",
      "        const errors = error.response && error.response.data && error.response.data.error",
      "            ? error.response.data.error",
      "            : (error && error.message) || null;",
      "        yield put({ type: $2_FAILURE, ...{ errors } });",
      "    }",
      "}",
      "",
      "/**",
      " * Watcher function",
      " * @returns {void}",
      " */",
      "export function* watcher$1() {",
      "    yield takeLatest($2_REQUEST, worker$1);",
      "}"
    ]
  },
  "Root Reducer": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reduxrootred",
    "body": [
      "// IMPORTS",
      "import { combineReducers } from 'redux';",
      "import { connectRouter } from 'connected-react-router';",
      "",
      "// REDUCERS",
      "",
      "",
      "// MAIN ROOT REDUCER",
      "const rootReducer = (history: any) => combineReducers({",
      "  router: connectRouter(history),",
      "});",
      "",
      "// EXPORTS",
      "export default rootReducer"
    ]
  },
  "Root Store": {
    "scope": "",
    "prefix": "reduxrootstore",
    "body": [
      "// IMPORTS",
      "import { createBrowserHistory } from 'history';",
      "import { applyMiddleware, compose, createStore } from 'redux';",
      "import { routerMiddleware } from 'connected-react-router';",
      "import createRootReducer from './reducers';",
      "",
      "// HISTORY",
      "const history = createBrowserHistory();",
      "",
      "// ENHANCERS",
      "const composeEnhancers = (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ trace: true })) || compose;",
      "",
      "// MAIN ROOT STORE",
      "const configureStore = (preloadedState: any = {}) => {",
      "  const store = createStore(",
      "    createRootReducer(history),",
      "    preloadedState,",
      "    composeEnhancers(",
      "      applyMiddleware(",
      "        routerMiddleware(history),",
      "        // ... other middlewares ...",
      "      ),",
      "    ),",
      "  )",
      "",
      "  return store",
      "}",
      "",
      "// EXPORTS",
      "export default configureStore;",
      "export { history }"
    ]
  },
  "Root Saga": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reduxrootsaga",
    "body": [
      "// IMPORTS",
      "import { all, fork } from 'redux-saga/effects';",
      "",
      "// SAGAS",
      "",
      "",
      "// MAIN ROOT SAGA",
      "function* rootSaga() {",
      "    yield all(",
      "        [].map(fork),",
      "    );",
      "}",
      "",
      "// EXPORTS",
      "export default rootSaga;"
    ]
  }
}
